db.getCollection("books").find({})
//1
db.books.distinct('title').map(t=>t.toUpperCase());
//2
db.books.distinct('categories').map(c=>{
    let count=db.books.countDocuments({categories:c})
    return c+' : '+count
})
//3
db.books.aggregate([
    {$match:{title:/^A/}},
    {$project:{title:1,pageCount:1}},
    {$sort:{publishedDate:-1}}
])
//4
db.books.aggregate([
{$match:{status:'PUBLISH'}},
{$project:{status:0}},
{ $set: { is_publish: true}}
])
//5
db.books.aggregate([
    {$match:{pageCount:{$gt:0}}},
    {$project:{longDescription:0,shortDescription:0}},
    {$skip:10},
    {$limit:100},
    {$out:'books2'}
])
//6
db.books.aggregate([
    {$group:{
        _id:'$pageCount',
        booksAmount:{$sum:1}       
    }},
     {$addFields:{pageCount:'$_id'}},
     {$project:{_id:0}},
     {$sort:{booksAmount:1}}
     
])
//7
db.books.aggregate([
    {$group:{
        _id:"$status",
        pageCountAVG:{$avg:'$pageCount'},
        pageCountMAX:{$max:'$pageCount'},
        pageCountMIN:{$min:'$pageCount'},
        pageCountFIRST:{$first:'$pageCount'},
        pageCountLAST:{$last:'$pageCount'},
    }},
    {$project:{
        pageCountAVG:1,
        pageCountMAX:1,
        pageCountMIN:1,
        pageCountFIRST:1,
        pageCountLAST:1
    }}   
])
//8
db.books.aggregate([
    {$group:{
        _id: '$status',
        bookNames:{$push:'$title'},
        disBookName:{$addToSet:'$title'}
    }}
])
//9
db.books.aggregate([
    {$unwind:'$authors'},
    {$group:{
        _id:'$authors',
        bookNames:{$push:'$title'},
        booksAmount:{$sum:1}
    }},
    {$sort:{booksAmount:-1}}
])
//10
db.books.aggregate([
{$unwind:'$categories'},
    {$group:{
        _id:'$categories',
        booksAmount: {$sum:1}
    }},
    {$sort:{booksAmount:-1}}
])
//11
db.books.aggregate([
    {$match:{authors:{$ne:''}}},
    {$group:{_id:'$authors'}},
    {$addFields:{name:'$_id'}},
    {$project:{_id:0}},
    {$sort:{name:1}},
    {$out:'authors'}    
])